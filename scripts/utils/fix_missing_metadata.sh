#!/data/data/com.termux/files/usr/bin/bash
# fix_missing_metadata.sh v1.3.0 — WZ Metadata Autopatcher (Fractal+Recursive)

set -eo pipefail
shopt -s nullglob globstar nocasematch

# === Конфигурация ===
readonly WZ_DIR="${WZ_DIR:-$HOME/wz-wiki}"
readonly RULES_DIR="${WZ_DIR}/rules"
readonly UUID_GEN="$HOME/wheelzone-script-utils/scripts/utils/generate_uuid.sh"
readonly BACKUP_DIR="${RULES_DIR}/_backup_$(date +%Y%m%d_%H%M%S)"
readonly MAX_BACKUPS=5
DRY_RUN=0
VERBOSE=0

# === Утилиты ===
die() { echo -e "\033[1;31m[ERR]\033[0m $1" >&2; exit 1; }
log() { echo -e "\033[1;32m[+]\033[0m $1"; }
warn() { echo -e "\033[1;33m[!]\033[0m $1"; }
debug() { [[ $VERBOSE -eq 1 ]] && echo -e "\033[1;34m[DEBUG]\033[0m $1"; }

usage() {
  cat <<EOM
fix_missing_metadata.sh v1.3.0 — Добавляет недостающие YAML-метаданные во все .md правила
Options:
  --dry-run     Только показать, что будет изменено
  --verbose     Подробный вывод
  --help        Показать эту справку
EOM
  exit 0
}

# === Метаданные ===
has_metadata() {
  awk '
    BEGIN { in_yaml=0; has_id=0; has_slug=0 }
    /^---$/ { in_yaml++ }
    /^id:/ && in_yaml==1 { has_id=1 }
    /^slug:/ && in_yaml==1 { has_slug=1 }
    END { exit !(in_yaml>=2 && has_id && has_slug) }
  ' "$1"
}

manage_backups() {
  [[ -d "$BACKUP_DIR" ]] || return 0
  local backups=("$RULES_DIR"/_backup_*)
  if (( ${#backups[@]} > MAX_BACKUPS )); then
    ls -td "$RULES_DIR"/_backup_* | tail -n +$((MAX_BACKUPS+1)) | xargs rm -rf
    debug "Удалены старые бэкапы"
  fi
}

patch_file() {
  local file="$1"
  local fname="${file##*/}"
  local slug="${fname%.md}"
  local uuid created tmp

  uuid=$(bash "$UUID_GEN") || die "Ошибка генерации UUID"
  created=$(date -Is)
  tmp="${file}.tmp.$$"

  {
    echo "---"
    echo "id: $uuid"
    echo "slug: $slug"
    echo "created: $created"
    echo "---"
    echo "<!-- metadata generated by fix_missing_metadata.sh on $(date) -->"
    grep -Ev '^(---|id:|slug:|created:)' "$file"
  } > "$tmp"

  if [[ "$DRY_RUN" -eq 1 ]]; then
    debug "DRY RUN: $fname будет патчен"
    rm -f "$tmp"
    return 0
  fi

  mkdir -p "$BACKUP_DIR"
  cp "$file" "$BACKUP_DIR/" || die "Ошибка создания бэкапа"
  mv "$tmp" "$file" && log "Patched: $fname" || die "Не удалось заменить $fname"
}

run_patch() {
  log "Поиск *.md без метаданных в $RULES_DIR (рекурсивно)"
  local count=0

  for file in "$RULES_DIR"/**/*.md; do
    [[ -f "$file" ]] || continue
    has_metadata "$file" && continue
    ((count++))
    patch_file "$file"
  done

  if [[ "$count" -eq 0 ]]; then
    log "Все правила уже содержат YAML-метаданные"
  else
    log "Обработано файлов: $count"
    manage_backups
  fi
}

main() {
  [[ -d "$RULES_DIR" ]] || die "Директория $RULES_DIR не существует"
  [[ -x "$UUID_GEN" ]] || die "Генератор UUID не найден: $UUID_GEN"

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dry-run) DRY_RUN=1 ;;
      --verbose) VERBOSE=1 ;;
      --help|-h) usage ;;
      *) die "Неизвестный параметр: $1" ;;
    esac
    shift
  done

  run_patch
}

main "$@"
