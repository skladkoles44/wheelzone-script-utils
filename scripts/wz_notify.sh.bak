export SESSION_ID="${SESSION_ID:-$(python3 ~/wheelzone-script-utils/scripts/utils/generate_uuid.py | cut -d'-' -f1)}"
: "${WZ_LOG_DIR:=$HOME/.wz_logs}"
mkdir -p "$WZ_LOG_DIR"

#!/data/data/com.termux/files/usr/bin/bash
# WZ Notify v2.5.0 — Fractal Notification Bridge (CI+Termux+Notion+Offline, optimized)

set -euo pipefail
IFS=$'\n\t'
SCRIPT_NAME="wz_notify.sh"
ENV_FILE="$HOME/.env.wzbot"
readonly WZ_HOME="$HOME/wheelzone-script-utils"
readonly OFFLINE_DIR="$WZ_HOME/logs/offline_notion"
LOG_FILE="$WZ_HOME/logs/permalog.log"
NOTION_VERSION="2022-06-28"
readonly IS_TERMUX=$([ -n "$(command -v termux-notification)" ] && echo true || echo false)
NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
SESSION_ID=$(uuidgen | tr 'A-Z' 'a-z' | cut -d'-' -f1)
TRACE_ID="${WZ_TRACE_ID:-$SESSION_ID}"

# === Defaults ===
PERMALOG=false
DRYRUN=false
USE_STDIN=false
JSON_OUT=false
CI_MODE=false
TYPE="system"
SEVERITY="info"

mkdir -p "$OFFLINE_DIR"

# === Load env ===
if [ -f "$ENV_FILE" ]; then
  export $(grep -E '^(NOTION_API_TOKEN|NOTION_TOKEN|NOTION_LOG_DB_ID)=' "$ENV_FILE" | xargs -0 | sed 's/"//g')
fi

export NOTION_API_TOKEN="${NOTION_API_TOKEN:-${NOTION_TOKEN:-}}"
export NOTION_LOG_DB_ID="${NOTION_LOG_DB_ID:-}"

# === Helpers ===
log() {
  local msg="$1"
  echo "[$NOW][$SESSION_ID][$SEVERITY] $msg"
  $PERMALOG && echo "[$NOW][$SESSION_ID][$SEVERITY] $msg" >> "$LOG_FILE"
}

notify_termux() {
  local title="$1"
  local content="$2"
  $CI_MODE && return
  $IS_TERMUX && {
    termux-notification --title "$title" --content "$content" --priority high --vibrate 500
    return
  }
  log "Termux notification skipped"
}

notify_notion() {
  local title="$1"
  local message="$2"

  if $JSON_OUT; then
    jq -n \
      --arg title "$title" \
      --arg msg "$message" \
      --arg sid "$SESSION_ID" \
      --arg trace "$TRACE_ID" \
      --arg typ "$TYPE" \
      --arg sev "$SEVERITY" \
      --arg now "$NOW" \
      --arg dbid "$NOTION_LOG_DB_ID" \
      '{
        parent: { database_id: $dbid },
        properties: {
          Name: { title: [{ text: { content: $title } }] },
          Message: { rich_text: [{ text: { content: $msg } }] },
          Type: { select: { name: $typ } },
          Severity: { select: { name: $sev } },
          Timestamp: { date: { start: $now } },
          SessionID: { rich_text: [{ text: { content: $sid } }] },
          Trace: { rich_text: [{ text: { content: $trace } }] }
        }
      }'
    return
  fi

  local payload=$(jq -n \
    --arg title "$title" \
    --arg msg "$message" \
    --arg sid "$SESSION_ID" \
    --arg trace "$TRACE_ID" \
    --arg typ "$TYPE" \
    --arg sev "$SEVERITY" \
    --arg now "$NOW" \
    --arg dbid "$NOTION_LOG_DB_ID" \
    '{
      parent: { database_id: $dbid },
      properties: {
        Name: { title: [{ text: { content: $title } }] },
        Message: { rich_text: [{ text: { content: $msg } }] },
        Type: { select: { name: $typ } },
        Severity: { select: { name: $sev } },
        Timestamp: { date: { start: $now } },
        SessionID: { rich_text: [{ text: { content: $sid } }] },
        Trace: { rich_text: [{ text: { content: $trace } }] }
      }
    }')

  if [ -z "$NOTION_API_TOKEN" ] || [ -z "$NOTION_LOG_DB_ID" ]; then
    log "⚠️ Notion credentials missing, saving offline"
    echo "$payload" > "$OFFLINE_DIR/${SESSION_ID}.json"
    return
  fi

  curl -sS -X POST https://api.notion.com/v1/pages \
    -H "Authorization: Bearer $NOTION_API_TOKEN" \
    -H "Content-Type: application/json" \
    -H "Notion-Version: $NOTION_VERSION" \
    -d "$payload" > /dev/null \
    || {
      log "⚠️ Notion offline, saving JSON to offline buffer"
      echo "$payload" > "$OFFLINE_DIR/${SESSION_ID}.json"
    }
}

usage() {
  cat <<EOF_USAGE
Usage: $SCRIPT_NAME [options] <title> <message>

Options:
  --type <val>       Type: script, alert, ci, chatend, system
  --severity <val>   Severity: info, warning, error, critical
  --stdin            Read message from stdin
  --dry              Simulate only
  --json             Output JSON instead of sending
  --log              Write to permalog
  --ci               CI mode (disable Termux)
  -h, --help         Show help
EOF_USAGE
}

main() {
  local args=()
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --type) TYPE="$2"; shift 2 ;;
      --severity) SEVERITY="$2"; shift 2 ;;
      --stdin) USE_STDIN=true; shift ;;
      --dry) DRYRUN=true; shift ;;
      --json) JSON_OUT=true; shift ;;
      --log) PERMALOG=true; shift ;;
      --ci) CI_MODE=true; TYPE="ci"; shift ;;
      -h|--help) usage; exit 0 ;;
      *) args+=("$1"); shift ;;
    esac
  done

  local title message
  if $USE_STDIN; then
    message=$(cat)
    title="${args[0]:-STDIN}"
  elif [ "${#args[@]}" -lt 2 ]; then
    usage; exit 1
  else
    title="${args[0]}"
    message="${args[*]:1}"
  fi

  log "🚀 Notification [$TYPE][$SEVERITY]: $title — $message"
  $DRYRUN && { log "DRYRUN: simulation complete"; exit 0; }

  notify_termux "$title" "$message"
  notify_notion "$title" "$message"
}

main "$@"
