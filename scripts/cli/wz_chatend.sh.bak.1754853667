#!/data/data/com.termux/files/usr/bin/bash
# uuid: 2025-08-26T13:19:23+03:00-793198999
# title: wz_chatend.sh.bak.1754853667
# component: .
# updated_at: 2025-08-26T13:19:23+03:00

set -Eeuo pipefail

# --- WZ path sanitizer (idempotent) ---
sanitize_wz_path(){
  local p="$1"
  p="${p#$:}"    # —É–±—Ä–∞—Ç—å –≤–µ–¥—É—â–∏–π –¥–≤–æ–µ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  p="${p#:}"     # (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –¥–≤–∞–∂–¥—ã)
  case "$p" in
    "~"|"~/") p="$HOME/";;
    "~"/*)      p="$HOME/${p#~/}";;
  esac
  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π (–∫—Ä–æ–º–µ URL —Å–æ —Å—Ö–µ–º–æ–π)
  echo "$p" | sed -E 's#(^|[^:])//+#***REMOVED***/#g'
}
# --- /sanitizer ---

set -eo pipefail
shopt -s nullglob failglob nocasematch

readonly DEFAULT_OUTPUT_DIR="${HOME}/wz-wiki/WZChatEnds"
readonly TIMESTAMP="$(date +%Y%m%d-%H%M%S-%3N)"
readonly UUID="$(cat /proc/sys/kernel/random/uuid || uuidgen || python3 -c 'import uuid; print(uuid.uuid4())')"
readonly SLUG="$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-')"
readonly FILENAME="${TIMESTAMP}-${UUID//-/}-${SLUG}.md"
readonly OUTPUT_PATH="${DEFAULT_OUTPUT_DIR}/${FILENAME}"
readonly BUFFER_DIR="$HOME/wzbuffer"
readonly END_BLOCKS_FILE="${BUFFER_DIR}/end_blocks.txt"
readonly INSIGHTS_FILE="${BUFFER_DIR}/tmp_insights.txt"
readonly FRACTAL_LOG="${BUFFER_DIR}/fractal_processing.log"

mkdir -p "$DEFAULT_OUTPUT_DIR" "$BUFFER_DIR"
: > "$FRACTAL_LOG"

normalize_path() {
    local path="$1"
    path="${path#:}"
    path="${path//[\'\"]/}"
    [[ "$path" == ~* ]] && path="${path/#\~/$HOME}"
    if command -v realpath >/dev/null; then
        realpath -m "$path" 2>/dev/null || echo "$path"
    else
        echo "$path"
    fi
}

log_fractal() {
    echo "[$(date +%H:%M:%S)] $*" >> "$FRACTAL_LOG"
}

process_fractal_lines() {
    local input_file="$1"
    local depth="${2:-0}"
    local max_depth=5

    if (( depth > max_depth )); then
        log_fractal "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ ($max_depth)"
        return 0
    fi

    if [[ ! -f "$input_file" ]]; then
        log_fractal "‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $input_file"
        return 1
    fi

    local indent=$(printf '%*s' "$((depth * 2))" "")
    local header_label

    case "$depth" in
        0) header_label="# –û—Å–Ω–æ–≤–Ω–æ–π ChatEnd" ;;
        1) header_label="# –í–ª–æ–∂–µ–Ω–Ω—ã–π ChatEnd" ;;
        2) header_label="# –ì–ª—É–±–æ–∫–∏–π ChatEnd" ;;
        *) header_label="# –£—Ä–æ–≤–µ–Ω—å $depth" ;;
    esac

    echo -e "\n${indent}${header_label}"
    echo "${indent}<!-- source: $(basename "$input_file") -->"

    while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ "$line" =~ \[\[FRACTAL:(.*)\]\] ]]; then
            local raw_path="${BASH_REMATCH[1]}"
            local normalized_path=$(normalize_path "$raw_path")

            if [[ -f "$normalized_path" ]]; then
                log_fractal "üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: $normalized_path (–∏–∑ $input_file)"
                process_fractal_lines "$normalized_path" "$((depth + 1))"
            else
                log_fractal "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $normalized_path (–∏–∑ $input_file)"
                echo "${indent}‚ö†Ô∏è –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $(basename "$normalized_path")"
            fi
        else
            echo "${indent}${line}"
        fi
    done < "$input_file"
}

generate_yaml_blocks() {
    local output_file="$1"
    {
        echo "# Generated: $(date -Iseconds)"
        echo "uuid: ${UUID}"
        echo "slug: ${SLUG}"
        echo "timestamp: ${TIMESTAMP}"
        echo "chatend_file: ${FILENAME}"
        echo "blocks:"
        grep -Pzo '(?s)(?<=^|[\n\r])```(DONE|TODO|INSIGHT|RULE)\n.*?\n```' "$END_BLOCKS_FILE" |
            awk 'BEGIN{RS="```"; ORS=""} 
                 /^(DONE|TODO|INSIGHT|RULE)\n/ {
                     gsub(/\n/, "\n  ", $0);
                     print "  - |\n    " $0 "\n"
                 }'
    } > "${output_file}"
}

generate_final_report() {
    {
        echo "# ChatEnd Report"
        echo "**UUID:** ${UUID}"
        echo "**Slug:** ${SLUG}"
        echo "**Generated:** ${TIMESTAMP}"
        echo
        echo "## Summary"
        echo "Total blocks processed: $(grep -c '^-' "${BUFFER_DIR}/end_blocks.yaml")"
        echo
        echo "## Detailed Blocks"
        cat "$END_BLOCKS_FILE"
        echo
        if [[ -s "$INSIGHTS_FILE" ]]; then
            echo "## Key Insights"
            cat "$INSIGHTS_FILE"
        fi
        if [[ -s "$FRACTAL_LOG" ]]; then
            echo "## Processing Log"
            echo '```log'
            cat "$FRACTAL_LOG"
            echo '```'
        fi
    } > "$OUTPUT_PATH"
    echo "‚úÖ ChatEnd saved to: ${OUTPUT_PATH}"
}

main() {
    local mode="$1"
    local input_file="$2"

    case "$mode" in
        --fractal)
            [[ -z "$input_file" ]] && { echo "Usage: $0 --fractal <input_file>" >&2; exit 1; }
            process_fractal_lines "$input_file"
            ;;
        *)
            generate_yaml_blocks "${BUFFER_DIR}/end_blocks.yaml"
            generate_final_report
            ;;
    esac
}

main "$@"
