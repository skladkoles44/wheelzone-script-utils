#!/data/data/com.termux/files/usr/bin/bash
# WZ ChatEnd MD Proxy v0.3
# - –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ wz_chatend.sh –≤ wz-wiki
# - –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ Include: (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ "Include: ~/...", "Include:~/...", "Include:$HOME/...")
# - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ~ –∏ $HOME, –º–∞—Ä–∫–µ—Ä—ã BEGIN/END, graceful warn –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
# - –ü–µ—Ä–µ–¥–∞—ë—Ç –≤ ORIG —á–µ—Ä–µ–∑ --md <preprocessed.md>
set -Eeuo pipefail

SAFE_LOG="$HOME/.wz_logs/wz_chatend_safe.log"
FRAC_LOG="$HOME/.wz_logs/fractal_chatend.log"
TMP_DIR="$HOME/.wz_tmp"
mkdir -p "$(dirname "$SAFE_LOG")" "$TMP_DIR"

ts(){ date -u +'%Y-%m-%d %H:%M:%S'; }
slog(){ echo "[$(ts)] $*" >> "$SAFE_LOG"; }
flog(){ echo "[$(ts)] $*" >> "$FRAC_LOG"; }

# --- auto-detect ORIG ---
: "${CHATEND_ORIG:=}"
if [ -z "${CHATEND_ORIG:-}" ]; then
  for C in "$HOME/wz-wiki/scripts/wz_chatend.sh" \
           "$HOME/wz-wiki/wz-wiki/scripts/wz_chatend.sh"
  do
    [ -x "$C" ] && CHATEND_ORIG="$C" && break
  done
fi
[ -n "${CHATEND_ORIG:-}" ] && [ -x "$CHATEND_ORIG" ] || {
  echo "[ERR] ORIG not found: ${CHATEND_ORIG:-unset}" >&2
  exit 2
}

trim(){ sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//' -e 's/\r$//'; }

expand_home(){
  # stdin->stdout; strip leading ':', quotes; expand ~, $HOME
  local p; p="$(cat)"
  p="${p#:}"
  p="${p%\"}"; p="${p#\"}"
  p="${p%\'}"; p="${p#\'}"
  p="$(printf '%s' "$p" | trim)"
  case "$p" in
    \$HOME|\$HOME/*) p="${p/#\$HOME/$HOME}";;
    ~|~/*)           p="${p/#~/$HOME}";;
  esac
  # normalize double slashes (keep proto)
  printf '%s' "$p" | sed -E 's#(^|[^:])//+#***REMOVED***/#g'
}

preprocess_md(){
  # $1=input md, stdout -> preprocessed file path
  local in="$1"
  [ -f "$in" ] || { echo "[ERR] input not found: $in" >&2; exit 2; }
  local base out
  base="$(basename "$in")"
  out="$TMP_DIR/pp_${base%.*}_$(date +%s).md"

  flog "üåø –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: $in (depth=1)"
  {
    while IFS= read -r line || [ -n "$line" ]; do
      case "$line" in
        Include:*)
          raw="${line#Include:}"
          raw="$(printf '%s' "$raw" | trim)"
          sane="$(printf '%s' "$raw" | expand_home)"
          if [ -f "$sane" ]; then
            echo "<!-- BEGIN Include: $raw ‚Üí $sane -->"
            cat "$sane"
            echo "<!-- END Include: $sane -->"
            flog "‚úÖ Include OK: $raw ‚Üí $sane"
          else
            echo "<!-- WARN: Include missing: $raw (expanded: $sane) -->"
            flog "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $raw"
          fi
          ;;
        *)
          printf '%s\n' "$line"
          ;;
      esac
    done < "$in"
  } > "$out"

  echo "$out"
}

usage(){ echo "Usage: $(basename "$0") <input.md> [extra args -> ORIG]"; }

main(){
  [ $# -ge 1 ] || { usage; exit 2; }
  local input="$1"; shift || true
  local out
  out="$(preprocess_md "$input")"
  slog "MD‚ÜíORIG: $input -> $out"
  # –ü–µ—Ä–µ–¥–∞—ë–º –≤ ORIG –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ --md
  exec bash --norc "$CHATEND_ORIG" --md "$out" "$@"
}

main "$@"
