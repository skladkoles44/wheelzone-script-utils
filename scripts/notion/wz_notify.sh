#!/data/data/com.termux/files/usr/bin/bash
# WZ Notify v2.2.3 ‚Äî –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–π Termux-Notion wrapper
# ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñà
# ‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ

# === –§—Ä–∞–∫—Ç–∞–ª Core ===
fractalize() {
  local func_name="$1"
  shift
  echo "‚îå‚îÄ‚îÄ ${func_name}($*)" >> "${TRACE_LOG}"
  "${func_name}" "$@" | tee -a "${DEBUG_LOG}"  # –°–∞–º–æ–ø–æ–¥–æ–±–∏–µ –≤—ã–≤–æ–¥–∞
  echo "‚îî‚îÄ‚îÄ ${func_name}($*) ‚Üí $?" >> "${TRACE_LOG}"
}

# === –§—Ä–∞–∫—Ç–∞–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
init_fractal() {
  set -euo pipefail
  IFS=$'\n\t'
  readonly SCRIPT_NAME="${0##*/}"
  readonly ENV_FILE="$HOME/.env.wzbot"
  readonly WZ_HOME="$HOME/wheelzone-script-utils"
  readonly LOGDIR="$HOME/.local/var/log"
  mkdir -p "${LOGDIR}" "${WZ_HOME}/logs"

  # –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ (NDJSON + –¥–µ—Ä–µ–≤–æ –≤—ã–∑–æ–≤–æ–≤)
  readonly DEBUG_LOG="${LOGDIR}/wz_notify_debug.ndjson"
  readonly TRACE_LOG="${LOGDIR}/wz_notify_trace.fractal"
  exec 2>> "${TRACE_LOG}"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
}

# === –§—Ä–∞–∫—Ç–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_fractal() {
  local level="$1" msg="$2"
  fractalize log_internal "${level}" "${msg}"  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
}

log_internal() {
  jq -cn --arg lvl "$1" --arg msg "$2" \
    '{time: (now|todateiso8601), level: $lvl, message: $msg}' \
    >> "${DEBUG_LOG}"
}

# === –§—Ä–∞–∫—Ç–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
parse_fractal() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --stdin)
        fractalize process_stdin
        ;;
      --selftest)
        fractalize run_selftest
        exit 0
        ;;
      *) 
        log_fractal "ERROR" "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
        exit 1
        ;;
    esac
    shift
  done
}

process_stdin() {
  [[ -t 0 ]] && { log_fractal "ERROR" "--stdin given but stdin empty"; exit 1; }
  jq -c '.' < /dev/stdin > "${LOGDIR}/tmp_notify_input.json"
  log_fractal "DEBUG" "–°–æ—Ö—Ä–∞–Ω—ë–Ω stdin"
}

run_selftest() {
  log_fractal "INFO" "–ó–∞–ø—É—Å–∫ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"
  echo '{"type":"system","title":"üîß –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤","message":"–†–µ–∫—É—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–∞!","severity":"info"}' \
    | fractalize parse_fractal --stdin
}

# === –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–∞–∫—Ç–∞–ª ===
main() {
  init_fractal
  log_fractal "INFO" "–ó–∞–ø—É—Å–∫ ${SCRIPT_NAME} (PID $$)"
  fractalize parse_fractal "$@"
  log_fractal "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"
}

main "$@"  # –ó–∞–ø—É—Å–∫ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π
