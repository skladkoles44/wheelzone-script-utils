#!/data/data/com.termux/files/usr/bin/python3
import json
import os
from datetime import datetime
from datetime import timezone
import sys
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_DIR = os.path.expanduser("~/.wz_logs")
NOTION_LOG_FILE = os.path.join(LOG_DIR, "notion_log.ndjson")
MOCK_RESPONSES = os.path.join(LOG_DIR, "notion_mock_responses.ndjson")

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs(LOG_DIR, exist_ok=True)

def generate_request_id(payload):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    payload_str = json.dumps(payload, sort_keys=True)
    return hashlib.md5(payload_str.encode()).hexdigest()

def log_locally(payload, response=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª"""
    log_entry = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "request_id": generate_request_id(payload),
        "request": payload,
        "response": response
    }
    
    try:
        with open(NOTION_LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
        
        if response:
            with open(MOCK_RESPONSES, "a", encoding="utf-8") as f:
                f.write(json.dumps(response, ensure_ascii=False) + "\n")
    except Exception as e:
        print(f"[WARNING] –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def notion_log_entry(payload):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock-–æ—Ç–≤–µ—Ç
    mock_response = {
        "status": "mocked",
        "request_id": generate_request_id(payload),
        "timestamp": datetime.now(timezone.utc).isoformat()
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
    log_locally(payload, mock_response)
    
    if not os.getenv("NOTION_TOKEN") or not os.getenv("NOTION_LOG_DB_ID"):
        print("‚ö†Ô∏è NOTION_TOKEN –∏–ª–∏ NOTION_LOG_DB_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return mock_response
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API Notion
    print("üîå [MOCK] –ó–∞–ø—Ä–æ—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    return mock_response

if __name__ == "__main__":
    try:
        payload = json.load(sys.stdin)
        result = notion_log_entry(payload)
        print(json.dumps(result))
    except json.JSONDecodeError:
        print('[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π JSON-–≤–≤–æ–¥')
        sys.exit(1)
    except Exception as e:
        print(f'[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}')
        sys.exit(1)
